/**
 * This class is generated by jOOQ
 */
package sxj.db.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import sxj.db.Keys;
import sxj.db.Test;
import sxj.db.tables.records.ExamConRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ExamCon extends TableImpl<ExamConRecord> {

    private static final long serialVersionUID = 451289565;

    /**
     * The reference instance of <code>test.exam_con</code>
     */
    public static final ExamCon EXAM_CON = new ExamCon();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ExamConRecord> getRecordType() {
        return ExamConRecord.class;
    }

    /**
     * The column <code>test.exam_con.eid</code>.
     */
    public final TableField<ExamConRecord, Integer> EID = createField("eid", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>test.exam_con.coursename</code>.
     */
    public final TableField<ExamConRecord, String> COURSENAME = createField("coursename", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>test.exam_con.exam</code>.
     */
    public final TableField<ExamConRecord, String> EXAM = createField("exam", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>test.exam_con</code> table reference
     */
    public ExamCon() {
        this("exam_con", null);
    }

    /**
     * Create an aliased <code>test.exam_con</code> table reference
     */
    public ExamCon(String alias) {
        this(alias, EXAM_CON);
    }

    private ExamCon(String alias, Table<ExamConRecord> aliased) {
        this(alias, aliased, null);
    }

    private ExamCon(String alias, Table<ExamConRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Test.TEST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ExamConRecord> getPrimaryKey() {
        return Keys.KEY_EXAM_CON_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ExamConRecord>> getKeys() {
        return Arrays.<UniqueKey<ExamConRecord>>asList(Keys.KEY_EXAM_CON_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ExamCon as(String alias) {
        return new ExamCon(alias, this);
    }

    /**
     * Rename this table
     */
    public ExamCon rename(String name) {
        return new ExamCon(name, null);
    }
}
