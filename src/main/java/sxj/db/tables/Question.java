/**
 * This class is generated by jOOQ
 */
package sxj.db.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import sxj.db.Keys;
import sxj.db.Test;
import sxj.db.tables.records.QuestionRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Question extends TableImpl<QuestionRecord> {

    private static final long serialVersionUID = -1183313948;

    /**
     * The reference instance of <code>test.question</code>
     */
    public static final Question QUESTION = new Question();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<QuestionRecord> getRecordType() {
        return QuestionRecord.class;
    }

    /**
     * The column <code>test.question.id</code>. id号
     */
    public final TableField<QuestionRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "id号");

    /**
     * The column <code>test.question.num</code>. 大题序号
     */
    public final TableField<QuestionRecord, String> NUM = createField("num", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "大题序号");

    /**
     * The column <code>test.question.name</code>. 题型名称
     */
    public final TableField<QuestionRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.CLOB, this, "题型名称");

    /**
     * The column <code>test.question.count</code>. 小题数
     */
    public final TableField<QuestionRecord, Integer> COUNT = createField("count", org.jooq.impl.SQLDataType.INTEGER, this, "小题数");

    /**
     * The column <code>test.question.score</code>. 每道小题分值
     */
    public final TableField<QuestionRecord, Double> SCORE = createField("score", org.jooq.impl.SQLDataType.FLOAT, this, "每道小题分值");

    /**
     * The column <code>test.question.percent</code>. 参与比
     */
    public final TableField<QuestionRecord, Double> PERCENT = createField("percent", org.jooq.impl.SQLDataType.FLOAT, this, "参与比");

    /**
     * The column <code>test.question.ascore</code>. 每小题实际得分
     */
    public final TableField<QuestionRecord, Double> ASCORE = createField("ascore", org.jooq.impl.SQLDataType.FLOAT, this, "每小题实际得分");

    /**
     * The column <code>test.question.count_score</code>. 每个题型总分值
     */
    public final TableField<QuestionRecord, Integer> COUNT_SCORE = createField("count_score", org.jooq.impl.SQLDataType.INTEGER, this, "每个题型总分值");

    /**
     * The column <code>test.question.course_id</code>. 属于哪门课程
     */
    public final TableField<QuestionRecord, Integer> COURSE_ID = createField("course_id", org.jooq.impl.SQLDataType.INTEGER, this, "属于哪门课程");

    /**
     * The column <code>test.question.normal_terminal</code>. 平时成绩1，期末成绩2
     */
    public final TableField<QuestionRecord, Integer> NORMAL_TERMINAL = createField("normal_terminal", org.jooq.impl.SQLDataType.INTEGER, this, "平时成绩1，期末成绩2");

    /**
     * The column <code>test.question.proxml</code>.
     */
    public final TableField<QuestionRecord, String> PROXML = createField("proxml", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>test.question</code> table reference
     */
    public Question() {
        this("question", null);
    }

    /**
     * Create an aliased <code>test.question</code> table reference
     */
    public Question(String alias) {
        this(alias, QUESTION);
    }

    private Question(String alias, Table<QuestionRecord> aliased) {
        this(alias, aliased, null);
    }

    private Question(String alias, Table<QuestionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Test.TEST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<QuestionRecord, Integer> getIdentity() {
        return Keys.IDENTITY_QUESTION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<QuestionRecord> getPrimaryKey() {
        return Keys.KEY_QUESTION_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<QuestionRecord>> getKeys() {
        return Arrays.<UniqueKey<QuestionRecord>>asList(Keys.KEY_QUESTION_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Question as(String alias) {
        return new Question(alias, this);
    }

    /**
     * Rename this table
     */
    public Question rename(String name) {
        return new Question(name, null);
    }
}
