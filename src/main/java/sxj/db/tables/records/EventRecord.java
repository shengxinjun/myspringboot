/**
 * This class is generated by jOOQ
 */
package sxj.db.tables.records;


import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record6;
import org.jooq.Row6;
import org.jooq.impl.UpdatableRecordImpl;

import sxj.db.tables.Event;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EventRecord extends UpdatableRecordImpl<EventRecord> implements Record6<Integer, String, String, String, String, Integer> {

    private static final long serialVersionUID = -1764522826;

    /**
     * Setter for <code>test.event.id</code>.
     */
    public EventRecord setId(Integer value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>test.event.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>test.event.title</code>.
     */
    public EventRecord setTitle(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>test.event.title</code>.
     */
    public String getTitle() {
        return (String) get(1);
    }

    /**
     * Setter for <code>test.event.start</code>.
     */
    public EventRecord setStart(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>test.event.start</code>.
     */
    public String getStart() {
        return (String) get(2);
    }

    /**
     * Setter for <code>test.event.end</code>.
     */
    public EventRecord setEnd(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>test.event.end</code>.
     */
    public String getEnd() {
        return (String) get(3);
    }

    /**
     * Setter for <code>test.event.class_name</code>.
     */
    public EventRecord setClassName(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>test.event.class_name</code>.
     */
    public String getClassName() {
        return (String) get(4);
    }

    /**
     * Setter for <code>test.event.user_Id</code>.
     */
    public EventRecord setUserId(Integer value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>test.event.user_Id</code>.
     */
    public Integer getUserId() {
        return (Integer) get(5);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row6<Integer, String, String, String, String, Integer> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row6<Integer, String, String, String, String, Integer> valuesRow() {
        return (Row6) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field1() {
        return Event.EVENT.ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field2() {
        return Event.EVENT.TITLE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field3() {
        return Event.EVENT.START;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field4() {
        return Event.EVENT.END;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field5() {
        return Event.EVENT.CLASS_NAME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field6() {
        return Event.EVENT.USER_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value2() {
        return getTitle();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value3() {
        return getStart();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value4() {
        return getEnd();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value5() {
        return getClassName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value6() {
        return getUserId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EventRecord value1(Integer value) {
        setId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EventRecord value2(String value) {
        setTitle(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EventRecord value3(String value) {
        setStart(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EventRecord value4(String value) {
        setEnd(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EventRecord value5(String value) {
        setClassName(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EventRecord value6(Integer value) {
        setUserId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EventRecord values(Integer value1, String value2, String value3, String value4, String value5, Integer value6) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached EventRecord
     */
    public EventRecord() {
        super(Event.EVENT);
    }

    /**
     * Create a detached, initialised EventRecord
     */
    public EventRecord(Integer id, String title, String start, String end, String className, Integer userId) {
        super(Event.EVENT);

        set(0, id);
        set(1, title);
        set(2, start);
        set(3, end);
        set(4, className);
        set(5, userId);
    }
}
