/**
 * This class is generated by jOOQ
 */
package sxj.db.tables.records;


import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record11;
import org.jooq.Row11;
import org.jooq.impl.UpdatableRecordImpl;

import sxj.db.tables.Question;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class QuestionRecord extends UpdatableRecordImpl<QuestionRecord> implements Record11<Integer, String, String, Integer, Double, Double, Double, Integer, Integer, Integer, String> {

    private static final long serialVersionUID = 287958858;

    /**
     * Setter for <code>test.question.id</code>. id号
     */
    public QuestionRecord setId(Integer value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>test.question.id</code>. id号
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>test.question.num</code>. 大题序号
     */
    public QuestionRecord setNum(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>test.question.num</code>. 大题序号
     */
    public String getNum() {
        return (String) get(1);
    }

    /**
     * Setter for <code>test.question.name</code>. 题型名称
     */
    public QuestionRecord setName(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>test.question.name</code>. 题型名称
     */
    public String getName() {
        return (String) get(2);
    }

    /**
     * Setter for <code>test.question.count</code>. 小题数
     */
    public QuestionRecord setCount(Integer value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>test.question.count</code>. 小题数
     */
    public Integer getCount() {
        return (Integer) get(3);
    }

    /**
     * Setter for <code>test.question.score</code>. 每道小题分值
     */
    public QuestionRecord setScore(Double value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>test.question.score</code>. 每道小题分值
     */
    public Double getScore() {
        return (Double) get(4);
    }

    /**
     * Setter for <code>test.question.percent</code>. 参与比
     */
    public QuestionRecord setPercent(Double value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>test.question.percent</code>. 参与比
     */
    public Double getPercent() {
        return (Double) get(5);
    }

    /**
     * Setter for <code>test.question.ascore</code>. 每小题实际得分
     */
    public QuestionRecord setAscore(Double value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>test.question.ascore</code>. 每小题实际得分
     */
    public Double getAscore() {
        return (Double) get(6);
    }

    /**
     * Setter for <code>test.question.count_score</code>. 每个题型总分值
     */
    public QuestionRecord setCountScore(Integer value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>test.question.count_score</code>. 每个题型总分值
     */
    public Integer getCountScore() {
        return (Integer) get(7);
    }

    /**
     * Setter for <code>test.question.course_id</code>. 属于哪门课程
     */
    public QuestionRecord setCourseId(Integer value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>test.question.course_id</code>. 属于哪门课程
     */
    public Integer getCourseId() {
        return (Integer) get(8);
    }

    /**
     * Setter for <code>test.question.normal_terminal</code>. 平时成绩1，期末成绩2
     */
    public QuestionRecord setNormalTerminal(Integer value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>test.question.normal_terminal</code>. 平时成绩1，期末成绩2
     */
    public Integer getNormalTerminal() {
        return (Integer) get(9);
    }

    /**
     * Setter for <code>test.question.proxml</code>.
     */
    public QuestionRecord setProxml(String value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for <code>test.question.proxml</code>.
     */
    public String getProxml() {
        return (String) get(10);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record11 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row11<Integer, String, String, Integer, Double, Double, Double, Integer, Integer, Integer, String> fieldsRow() {
        return (Row11) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row11<Integer, String, String, Integer, Double, Double, Double, Integer, Integer, Integer, String> valuesRow() {
        return (Row11) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field1() {
        return Question.QUESTION.ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field2() {
        return Question.QUESTION.NUM;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field3() {
        return Question.QUESTION.NAME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field4() {
        return Question.QUESTION.COUNT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Double> field5() {
        return Question.QUESTION.SCORE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Double> field6() {
        return Question.QUESTION.PERCENT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Double> field7() {
        return Question.QUESTION.ASCORE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field8() {
        return Question.QUESTION.COUNT_SCORE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field9() {
        return Question.QUESTION.COURSE_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field10() {
        return Question.QUESTION.NORMAL_TERMINAL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field11() {
        return Question.QUESTION.PROXML;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value2() {
        return getNum();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value3() {
        return getName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value4() {
        return getCount();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Double value5() {
        return getScore();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Double value6() {
        return getPercent();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Double value7() {
        return getAscore();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value8() {
        return getCountScore();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value9() {
        return getCourseId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value10() {
        return getNormalTerminal();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value11() {
        return getProxml();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public QuestionRecord value1(Integer value) {
        setId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public QuestionRecord value2(String value) {
        setNum(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public QuestionRecord value3(String value) {
        setName(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public QuestionRecord value4(Integer value) {
        setCount(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public QuestionRecord value5(Double value) {
        setScore(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public QuestionRecord value6(Double value) {
        setPercent(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public QuestionRecord value7(Double value) {
        setAscore(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public QuestionRecord value8(Integer value) {
        setCountScore(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public QuestionRecord value9(Integer value) {
        setCourseId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public QuestionRecord value10(Integer value) {
        setNormalTerminal(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public QuestionRecord value11(String value) {
        setProxml(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public QuestionRecord values(Integer value1, String value2, String value3, Integer value4, Double value5, Double value6, Double value7, Integer value8, Integer value9, Integer value10, String value11) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached QuestionRecord
     */
    public QuestionRecord() {
        super(Question.QUESTION);
    }

    /**
     * Create a detached, initialised QuestionRecord
     */
    public QuestionRecord(Integer id, String num, String name, Integer count, Double score, Double percent, Double ascore, Integer countScore, Integer courseId, Integer normalTerminal, String proxml) {
        super(Question.QUESTION);

        set(0, id);
        set(1, num);
        set(2, name);
        set(3, count);
        set(4, score);
        set(5, percent);
        set(6, ascore);
        set(7, countScore);
        set(8, courseId);
        set(9, normalTerminal);
        set(10, proxml);
    }
}
