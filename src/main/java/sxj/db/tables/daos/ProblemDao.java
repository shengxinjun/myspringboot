/**
 * This class is generated by jOOQ
 */
package sxj.db.tables.daos;


import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import sxj.db.tables.Problem;
import sxj.db.tables.records.ProblemRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class ProblemDao extends DAOImpl<ProblemRecord, sxj.db.tables.pojos.Problem, Integer> {

    /**
     * Create a new ProblemDao without any configuration
     */
    public ProblemDao() {
        super(Problem.PROBLEM, sxj.db.tables.pojos.Problem.class);
    }

    /**
     * Create a new ProblemDao with an attached configuration
     */
    @Autowired
    public ProblemDao(Configuration configuration) {
        super(Problem.PROBLEM, sxj.db.tables.pojos.Problem.class, configuration);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Integer getId(sxj.db.tables.pojos.Problem object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<sxj.db.tables.pojos.Problem> fetchById(Integer... values) {
        return fetch(Problem.PROBLEM.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public sxj.db.tables.pojos.Problem fetchOneById(Integer value) {
        return fetchOne(Problem.PROBLEM.ID, value);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<sxj.db.tables.pojos.Problem> fetchByName(String... values) {
        return fetch(Problem.PROBLEM.NAME, values);
    }

    /**
     * Fetch records that have <code>score IN (values)</code>
     */
    public List<sxj.db.tables.pojos.Problem> fetchByScore(Double... values) {
        return fetch(Problem.PROBLEM.SCORE, values);
    }

    /**
     * Fetch records that have <code>course_id IN (values)</code>
     */
    public List<sxj.db.tables.pojos.Problem> fetchByCourseId(Integer... values) {
        return fetch(Problem.PROBLEM.COURSE_ID, values);
    }

    /**
     * Fetch records that have <code>student_id IN (values)</code>
     */
    public List<sxj.db.tables.pojos.Problem> fetchByStudentId(Integer... values) {
        return fetch(Problem.PROBLEM.STUDENT_ID, values);
    }

    /**
     * Fetch records that have <code>question_id IN (values)</code>
     */
    public List<sxj.db.tables.pojos.Problem> fetchByQuestionId(Integer... values) {
        return fetch(Problem.PROBLEM.QUESTION_ID, values);
    }

    /**
     * Fetch records that have <code>weight IN (values)</code>
     */
    public List<sxj.db.tables.pojos.Problem> fetchByWeight(Double... values) {
        return fetch(Problem.PROBLEM.WEIGHT, values);
    }
}
