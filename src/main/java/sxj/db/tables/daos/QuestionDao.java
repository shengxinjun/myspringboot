/**
 * This class is generated by jOOQ
 */
package sxj.db.tables.daos;


import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import sxj.db.tables.Question;
import sxj.db.tables.records.QuestionRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class QuestionDao extends DAOImpl<QuestionRecord, sxj.db.tables.pojos.Question, Integer> {

    /**
     * Create a new QuestionDao without any configuration
     */
    public QuestionDao() {
        super(Question.QUESTION, sxj.db.tables.pojos.Question.class);
    }

    /**
     * Create a new QuestionDao with an attached configuration
     */
    @Autowired
    public QuestionDao(Configuration configuration) {
        super(Question.QUESTION, sxj.db.tables.pojos.Question.class, configuration);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Integer getId(sxj.db.tables.pojos.Question object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<sxj.db.tables.pojos.Question> fetchById(Integer... values) {
        return fetch(Question.QUESTION.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public sxj.db.tables.pojos.Question fetchOneById(Integer value) {
        return fetchOne(Question.QUESTION.ID, value);
    }

    /**
     * Fetch records that have <code>num IN (values)</code>
     */
    public List<sxj.db.tables.pojos.Question> fetchByNum(String... values) {
        return fetch(Question.QUESTION.NUM, values);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<sxj.db.tables.pojos.Question> fetchByName(String... values) {
        return fetch(Question.QUESTION.NAME, values);
    }

    /**
     * Fetch records that have <code>count IN (values)</code>
     */
    public List<sxj.db.tables.pojos.Question> fetchByCount(Integer... values) {
        return fetch(Question.QUESTION.COUNT, values);
    }

    /**
     * Fetch records that have <code>score IN (values)</code>
     */
    public List<sxj.db.tables.pojos.Question> fetchByScore(Double... values) {
        return fetch(Question.QUESTION.SCORE, values);
    }

    /**
     * Fetch records that have <code>percent IN (values)</code>
     */
    public List<sxj.db.tables.pojos.Question> fetchByPercent(Double... values) {
        return fetch(Question.QUESTION.PERCENT, values);
    }

    /**
     * Fetch records that have <code>ascore IN (values)</code>
     */
    public List<sxj.db.tables.pojos.Question> fetchByAscore(Double... values) {
        return fetch(Question.QUESTION.ASCORE, values);
    }

    /**
     * Fetch records that have <code>count_score IN (values)</code>
     */
    public List<sxj.db.tables.pojos.Question> fetchByCountScore(Integer... values) {
        return fetch(Question.QUESTION.COUNT_SCORE, values);
    }

    /**
     * Fetch records that have <code>course_id IN (values)</code>
     */
    public List<sxj.db.tables.pojos.Question> fetchByCourseId(Integer... values) {
        return fetch(Question.QUESTION.COURSE_ID, values);
    }

    /**
     * Fetch records that have <code>normal_terminal IN (values)</code>
     */
    public List<sxj.db.tables.pojos.Question> fetchByNormalTerminal(Integer... values) {
        return fetch(Question.QUESTION.NORMAL_TERMINAL, values);
    }

    /**
     * Fetch records that have <code>proxml IN (values)</code>
     */
    public List<sxj.db.tables.pojos.Question> fetchByProxml(String... values) {
        return fetch(Question.QUESTION.PROXML, values);
    }
}
